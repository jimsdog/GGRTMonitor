// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.2
//
// <auto-generated>
//
// Generated from file `GGSmart.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __E__Dev_qtprjs_GGRTMonitor_generated_GGSmart_h__
#define __E__Dev_qtprjs_GGRTMonitor_generated_GGSmart_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/GCObject.h>
#include <Ice/AsyncResult.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/SlicedDataF.h>
#include <Ice/BuiltinSequences.h>
#include <Glacier2/Session.h>
#include <GGConfig.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace GGSmart
{

class GGOrderMsg;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::GGSmart::GGOrderMsg>&);
::IceProxy::Ice::Object* upCast(::IceProxy::GGSmart::GGOrderMsg*);

class Robot;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::GGSmart::Robot>&);
::IceProxy::Ice::Object* upCast(::IceProxy::GGSmart::Robot*);

}

}

namespace GGSmart
{

class GGOrderMsg;
::Ice::Object* upCast(::GGSmart::GGOrderMsg*);
typedef ::IceInternal::Handle< ::GGSmart::GGOrderMsg> GGOrderMsgPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::GGSmart::GGOrderMsg> GGOrderMsgPrx;
void __patch(GGOrderMsgPtr&, const ::Ice::ObjectPtr&);

class Robot;
::Ice::Object* upCast(::GGSmart::Robot*);
typedef ::IceInternal::Handle< ::GGSmart::Robot> RobotPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::GGSmart::Robot> RobotPrx;
void __patch(RobotPtr&, const ::Ice::ObjectPtr&);

}

namespace GGSmart
{

class InvokeFailException : public ::Ice::UserException
{
public:

    InvokeFailException() {}
    explicit InvokeFailException(const ::std::string&);
    virtual ~InvokeFailException() throw();

    virtual ::std::string ice_name() const;
    virtual InvokeFailException* ice_clone() const;
    virtual void ice_throw() const;

    ::std::string reason;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::UserException::__writeImpl;
    using ::Ice::UserException::__readImpl;
};

static InvokeFailException __InvokeFailException_init;

typedef ::std::vector< ::Ice::Byte> ByteSeq;

typedef ::std::vector< ::std::string> StrSeq;

typedef ::std::map< ::std::string, ::std::string> StrStrMap;

typedef ::std::vector< ::GGSmart::GGOrderMsgPtr> GGOrderMsgSeq;

typedef ::std::map< ::std::string, ::GGSmart::GGOrderMsgPtr> StrGGOrderMsgMap;

typedef ::std::vector< ::GGSmart::RobotPtr> RobotSeq;

typedef ::std::map< ::std::string, ::GGSmart::RobotPtr> StrRobotMap;

}

namespace Ice
{
template<>
struct StreamableTraits< ::GGSmart::InvokeFailException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

}

namespace GGSmart
{

}

namespace IceProxy
{

namespace GGSmart
{

class GGOrderMsg : virtual public ::IceProxy::Ice::Object
{
public:
    
    ::IceInternal::ProxyHandle<GGOrderMsg> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<GGOrderMsg*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<GGOrderMsg> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<GGOrderMsg*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<GGOrderMsg> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<GGOrderMsg*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<GGOrderMsg> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<GGOrderMsg*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<GGOrderMsg> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<GGOrderMsg*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<GGOrderMsg> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<GGOrderMsg*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<GGOrderMsg> ice_secure(bool __secure) const
    {
        return dynamic_cast<GGOrderMsg*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<GGOrderMsg> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<GGOrderMsg*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<GGOrderMsg> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<GGOrderMsg*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<GGOrderMsg> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<GGOrderMsg*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<GGOrderMsg> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<GGOrderMsg*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<GGOrderMsg> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<GGOrderMsg*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<GGOrderMsg> ice_twoway() const
    {
        return dynamic_cast<GGOrderMsg*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<GGOrderMsg> ice_oneway() const
    {
        return dynamic_cast<GGOrderMsg*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<GGOrderMsg> ice_batchOneway() const
    {
        return dynamic_cast<GGOrderMsg*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<GGOrderMsg> ice_datagram() const
    {
        return dynamic_cast<GGOrderMsg*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<GGOrderMsg> ice_batchDatagram() const
    {
        return dynamic_cast<GGOrderMsg*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<GGOrderMsg> ice_compress(bool __compress) const
    {
        return dynamic_cast<GGOrderMsg*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<GGOrderMsg> ice_timeout(int __timeout) const
    {
        return dynamic_cast<GGOrderMsg*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<GGOrderMsg> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<GGOrderMsg*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<GGOrderMsg> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<GGOrderMsg*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class Robot : virtual public ::IceProxy::Ice::Object
{
public:
    
    ::IceInternal::ProxyHandle<Robot> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Robot*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Robot> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Robot*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Robot> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Robot*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Robot> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Robot*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Robot> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Robot*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Robot> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Robot*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Robot> ice_secure(bool __secure) const
    {
        return dynamic_cast<Robot*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Robot> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Robot*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Robot> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Robot*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Robot> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Robot*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Robot> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Robot*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Robot> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<Robot*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Robot> ice_twoway() const
    {
        return dynamic_cast<Robot*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Robot> ice_oneway() const
    {
        return dynamic_cast<Robot*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Robot> ice_batchOneway() const
    {
        return dynamic_cast<Robot*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Robot> ice_datagram() const
    {
        return dynamic_cast<Robot*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Robot> ice_batchDatagram() const
    {
        return dynamic_cast<Robot*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Robot> ice_compress(bool __compress) const
    {
        return dynamic_cast<Robot*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Robot> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Robot*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Robot> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Robot*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Robot> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Robot*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace GGSmart
{

class GGOrderMsg : virtual public ::Ice::Object
{
public:

    typedef GGOrderMsgPrx ProxyType;
    typedef GGOrderMsgPtr PointerType;

    GGOrderMsg()
    {
    }

    GGOrderMsg(::Ice::Int __ice_OderProperty, const ::std::string& __ice_OderID, const ::std::string& __ice_OderType, const ::GGSmart::ByteSeq& __ice_RunData, const ::GGSmart::StrStrMap& __ice_ExData) :
        OderProperty(__ice_OderProperty),
        OderID(__ice_OderID),
        OderType(__ice_OderType),
        RunData(__ice_RunData),
        ExData(__ice_ExData)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    static ::Ice::ObjectFactoryPtr ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;

public:

    ::Ice::Int OderProperty;

    ::std::string OderID;

    ::std::string OderType;

    ::GGSmart::ByteSeq RunData;

    ::GGSmart::StrStrMap ExData;
protected:

    virtual ~GGOrderMsg() {}

friend class GGOrderMsg__staticInit;
};
#if !defined(_MSC_VER) || (_MSC_VER < 1900)
//
// COMPILERFIX: Visual Studio 2015 update 1 fails to access
// the proected destructor from a friend class.
//

class GGOrderMsg__staticInit
{
public:

    ::GGSmart::GGOrderMsg _init;
};

static GGOrderMsg__staticInit _GGOrderMsg_init;
#else
static auto _GGOrderMsg_init = ::GGSmart::GGOrderMsg::ice_factory;
#endif

inline bool operator==(const GGOrderMsg& l, const GGOrderMsg& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const GGOrderMsg& l, const GGOrderMsg& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class Robot : virtual public ::Ice::Object, public ::IceInternal::GCObject
{
public:

    typedef RobotPrx ProxyType;
    typedef RobotPtr PointerType;

    Robot()
    {
    }

    Robot(const ::std::string& __ice_Id, const ::GGSmart::StrStrMap& __ice_Property, const ::GGSmart::GGOrderMsgPtr& __ice_CurOrder, const ::GGSmart::StrSeq& __ice_Warnings, const ::GGSmart::ByteSeq& __ice_RunData, ::Ice::Byte __ice_CurPlace) :
        Id(__ice_Id),
        Property(__ice_Property),
        CurOrder(__ice_CurOrder),
        Warnings(__ice_Warnings),
        RunData(__ice_RunData),
        CurPlace(__ice_CurPlace)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __gcVisitMembers(::IceInternal::GCVisitor&);

    static ::Ice::ObjectFactoryPtr ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;

public:

    ::std::string Id;

    ::GGSmart::StrStrMap Property;

    ::GGSmart::GGOrderMsgPtr CurOrder;

    ::GGSmart::StrSeq Warnings;

    ::GGSmart::ByteSeq RunData;

    ::Ice::Byte CurPlace;
protected:

    virtual ~Robot() {}
};

inline bool operator==(const Robot& l, const Robot& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Robot& l, const Robot& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace GGSmart
{

}

#include <IceUtil/PopDisableWarnings.h>
#endif
