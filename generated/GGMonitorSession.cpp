// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `GGMonitorSession.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <GGMonitorSession.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/BasicStream.h>
#include <Ice/SlicedData.h>
#include <IceUtil/Iterator.h>
#include <IceUtil/PopDisableWarnings.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 3
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __GGSmart__MonitorCallback__updateRobotInfo_name = "updateRobotInfo";

const ::std::string __GGSmart__MonitorCallback__robotJoin_name = "robotJoin";

const ::std::string __GGSmart__MonitorCallback__robotLeave_name = "robotLeave";

const ::std::string __GGSmart__MonitorCallback__pushAllOnlineRobots_name = "pushAllOnlineRobots";

const ::std::string __GGSmart__MonitorSession__SetCallback_name = "SetCallback";

const ::std::string __GGSmart__MonitorSession__DoOrder_name = "DoOrder";

const ::std::string __GGSmart__MonitorSession__GetAllOnlineRobots_name = "GetAllOnlineRobots";

const ::std::string __GGSmart__MonitorSession__GetTheRobots_name = "GetTheRobots";

const ::std::string __GGSmart__MonitorSession__GetAuthSubStations_name = "GetAuthSubStations";

}

IceAsync::GGSmart::AMD_MonitorSession_DoOrder::AMD_MonitorSession_DoOrder(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::GGSmart::AMD_MonitorSession_DoOrder::ice_response()
{
    if(__validateResponse(true))
    {
        __writeEmptyParams();
        __response();
    }
}

void
IceAsync::GGSmart::AMD_MonitorSession_DoOrder::ice_exception(const ::std::exception& ex)
{
    if(const ::GGSmart::InvokeFailException* __ex = dynamic_cast<const ::GGSmart::InvokeFailException*>(&ex))
    {
        if(__validateResponse(false))
        {
            __writeUserException(*__ex, ::Ice::DefaultFormat);
            __response();
        }
    }
    else
    {
        ::IceInternal::IncomingAsync::ice_exception(ex);
    }
}

IceAsync::GGSmart::AMD_MonitorSession_GetAllOnlineRobots::AMD_MonitorSession_GetAllOnlineRobots(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::GGSmart::AMD_MonitorSession_GetAllOnlineRobots::ice_response(const ::GGSmart::RobotSeq& __ret)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(__ret);
            __os->writePendingObjects();
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}

void
IceAsync::GGSmart::AMD_MonitorSession_GetAllOnlineRobots::ice_exception(const ::std::exception& ex)
{
    if(const ::GGSmart::InvokeFailException* __ex = dynamic_cast<const ::GGSmart::InvokeFailException*>(&ex))
    {
        if(__validateResponse(false))
        {
            __writeUserException(*__ex, ::Ice::DefaultFormat);
            __response();
        }
    }
    else
    {
        ::IceInternal::IncomingAsync::ice_exception(ex);
    }
}

IceAsync::GGSmart::AMD_MonitorSession_GetTheRobots::AMD_MonitorSession_GetTheRobots(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::GGSmart::AMD_MonitorSession_GetTheRobots::ice_response(const ::GGSmart::RobotSeq& __ret)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(__ret);
            __os->writePendingObjects();
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}

void
IceAsync::GGSmart::AMD_MonitorSession_GetTheRobots::ice_exception(const ::std::exception& ex)
{
    if(const ::GGSmart::InvokeFailException* __ex = dynamic_cast<const ::GGSmart::InvokeFailException*>(&ex))
    {
        if(__validateResponse(false))
        {
            __writeUserException(*__ex, ::Ice::DefaultFormat);
            __response();
        }
    }
    else
    {
        ::IceInternal::IncomingAsync::ice_exception(ex);
    }
}

IceAsync::GGSmart::AMD_MonitorSession_GetAuthSubStations::AMD_MonitorSession_GetAuthSubStations(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::GGSmart::AMD_MonitorSession_GetAuthSubStations::ice_response(const ::GGSmart::StrSubStationMap& __ret)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(__ret);
            __os->writePendingObjects();
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}

void
IceAsync::GGSmart::AMD_MonitorSession_GetAuthSubStations::ice_exception(const ::std::exception& ex)
{
    if(const ::GGSmart::InvokeFailException* __ex = dynamic_cast<const ::GGSmart::InvokeFailException*>(&ex))
    {
        if(__validateResponse(false))
        {
            __writeUserException(*__ex, ::Ice::DefaultFormat);
            __response();
        }
    }
    else
    {
        ::IceInternal::IncomingAsync::ice_exception(ex);
    }
}
::IceProxy::Ice::Object* ::IceProxy::GGSmart::upCast(::IceProxy::GGSmart::MonitorCallback* p) { return p; }

void
::IceProxy::GGSmart::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::GGSmart::MonitorCallback>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::GGSmart::MonitorCallback;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::GGSmart::MonitorCallback::updateRobotInfo(const ::GGSmart::RobotPtr& __p_rt, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __GGSmart__MonitorCallback__updateRobotInfo_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_rt);
        __os->writePendingObjects();
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::GGSmart::MonitorCallback::begin_updateRobotInfo(const ::GGSmart::RobotPtr& __p_rt, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __GGSmart__MonitorCallback__updateRobotInfo_name, __del, __cookie);
    try
    {
        __result->prepare(__GGSmart__MonitorCallback__updateRobotInfo_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_rt);
        __os->writePendingObjects();
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::GGSmart::MonitorCallback::end_updateRobotInfo(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __GGSmart__MonitorCallback__updateRobotInfo_name);
}

void
IceProxy::GGSmart::MonitorCallback::robotJoin(const ::GGSmart::RobotPtr& __p_rt, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __GGSmart__MonitorCallback__robotJoin_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_rt);
        __os->writePendingObjects();
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::GGSmart::MonitorCallback::begin_robotJoin(const ::GGSmart::RobotPtr& __p_rt, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __GGSmart__MonitorCallback__robotJoin_name, __del, __cookie);
    try
    {
        __result->prepare(__GGSmart__MonitorCallback__robotJoin_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_rt);
        __os->writePendingObjects();
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::GGSmart::MonitorCallback::end_robotJoin(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __GGSmart__MonitorCallback__robotJoin_name);
}

void
IceProxy::GGSmart::MonitorCallback::robotLeave(const ::std::string& __p_id, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __GGSmart__MonitorCallback__robotLeave_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_id);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::GGSmart::MonitorCallback::begin_robotLeave(const ::std::string& __p_id, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __GGSmart__MonitorCallback__robotLeave_name, __del, __cookie);
    try
    {
        __result->prepare(__GGSmart__MonitorCallback__robotLeave_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_id);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::GGSmart::MonitorCallback::end_robotLeave(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __GGSmart__MonitorCallback__robotLeave_name);
}

void
IceProxy::GGSmart::MonitorCallback::pushAllOnlineRobots(const ::GGSmart::RobotSeq& __p_rts, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __GGSmart__MonitorCallback__pushAllOnlineRobots_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_rts);
        __os->writePendingObjects();
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::GGSmart::MonitorCallback::begin_pushAllOnlineRobots(const ::GGSmart::RobotSeq& __p_rts, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __GGSmart__MonitorCallback__pushAllOnlineRobots_name, __del, __cookie);
    try
    {
        __result->prepare(__GGSmart__MonitorCallback__pushAllOnlineRobots_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_rts);
        __os->writePendingObjects();
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::GGSmart::MonitorCallback::end_pushAllOnlineRobots(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __GGSmart__MonitorCallback__pushAllOnlineRobots_name);
}

const ::std::string&
IceProxy::GGSmart::MonitorCallback::ice_staticId()
{
    return ::GGSmart::MonitorCallback::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::GGSmart::MonitorCallback::__newInstance() const
{
    return new MonitorCallback;
}
::IceProxy::Ice::Object* ::IceProxy::GGSmart::upCast(::IceProxy::GGSmart::MonitorSession* p) { return p; }

void
::IceProxy::GGSmart::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::GGSmart::MonitorSession>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::GGSmart::MonitorSession;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::GGSmart::MonitorSession::SetCallback(const ::GGSmart::MonitorCallbackPrx& __p_cb, const ::std::string& __p_id, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__GGSmart__MonitorSession__SetCallback_name);
    ::IceInternal::Outgoing __og(this, __GGSmart__MonitorSession__SetCallback_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_cb);
        __os->write(__p_id);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::GGSmart::InvokeFailException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::GGSmart::MonitorSession::begin_SetCallback(const ::GGSmart::MonitorCallbackPrx& __p_cb, const ::std::string& __p_id, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__GGSmart__MonitorSession__SetCallback_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __GGSmart__MonitorSession__SetCallback_name, __del, __cookie);
    try
    {
        __result->prepare(__GGSmart__MonitorSession__SetCallback_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_cb);
        __os->write(__p_id);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::GGSmart::MonitorSession::__begin_SetCallback(const ::GGSmart::MonitorCallbackPrx& __p_cb, const ::std::string& __p_id, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::GGSmart::MonitorSessionPrx __proxy = ::GGSmart::MonitorSessionPrx::uncheckedCast(__result->getProxy());
            try
            {
                __proxy->end_SetCallback(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response();
            }
        }
    
    private:
        
        ::std::function<void ()> _response;
    };
    return begin_SetCallback(__p_cb, __p_id, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::GGSmart::MonitorSession::end_SetCallback(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __GGSmart__MonitorSession__SetCallback_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::GGSmart::InvokeFailException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    __result->__readEmptyParams();
}

void
IceProxy::GGSmart::MonitorSession::DoOrder(const ::GGSmart::GGOrderMsgPtr& __p_msg, const ::GGSmart::StrSeq& __p_idseq, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__GGSmart__MonitorSession__DoOrder_name);
    ::IceInternal::Outgoing __og(this, __GGSmart__MonitorSession__DoOrder_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_msg);
        __os->write(__p_idseq);
        __os->writePendingObjects();
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::GGSmart::InvokeFailException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::GGSmart::MonitorSession::begin_DoOrder(const ::GGSmart::GGOrderMsgPtr& __p_msg, const ::GGSmart::StrSeq& __p_idseq, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__GGSmart__MonitorSession__DoOrder_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __GGSmart__MonitorSession__DoOrder_name, __del, __cookie);
    try
    {
        __result->prepare(__GGSmart__MonitorSession__DoOrder_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_msg);
        __os->write(__p_idseq);
        __os->writePendingObjects();
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::GGSmart::MonitorSession::__begin_DoOrder(const ::GGSmart::GGOrderMsgPtr& __p_msg, const ::GGSmart::StrSeq& __p_idseq, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::GGSmart::MonitorSessionPrx __proxy = ::GGSmart::MonitorSessionPrx::uncheckedCast(__result->getProxy());
            try
            {
                __proxy->end_DoOrder(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response();
            }
        }
    
    private:
        
        ::std::function<void ()> _response;
    };
    return begin_DoOrder(__p_msg, __p_idseq, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::GGSmart::MonitorSession::end_DoOrder(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __GGSmart__MonitorSession__DoOrder_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::GGSmart::InvokeFailException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    __result->__readEmptyParams();
}

::GGSmart::RobotSeq
IceProxy::GGSmart::MonitorSession::GetAllOnlineRobots(const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__GGSmart__MonitorSession__GetAllOnlineRobots_name);
    ::IceInternal::Outgoing __og(this, __GGSmart__MonitorSession__GetAllOnlineRobots_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::GGSmart::InvokeFailException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::GGSmart::RobotSeq __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __is->readPendingObjects();
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::GGSmart::MonitorSession::begin_GetAllOnlineRobots(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__GGSmart__MonitorSession__GetAllOnlineRobots_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __GGSmart__MonitorSession__GetAllOnlineRobots_name, __del, __cookie);
    try
    {
        __result->prepare(__GGSmart__MonitorSession__GetAllOnlineRobots_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::GGSmart::MonitorSession::__begin_GetAllOnlineRobots(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::GGSmart::RobotSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::GGSmart::RobotSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::GGSmart::MonitorSessionPrx __proxy = ::GGSmart::MonitorSessionPrx::uncheckedCast(__result->getProxy());
            ::GGSmart::RobotSeq __ret;
            try
            {
                __ret = __proxy->end_GetAllOnlineRobots(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (const ::GGSmart::RobotSeq&)> _response;
    };
    return begin_GetAllOnlineRobots(__ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::GGSmart::RobotSeq
IceProxy::GGSmart::MonitorSession::end_GetAllOnlineRobots(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __GGSmart__MonitorSession__GetAllOnlineRobots_name);
    ::GGSmart::RobotSeq __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::GGSmart::InvokeFailException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __is->readPendingObjects();
    __result->__endReadParams();
    return __ret;
}

::GGSmart::RobotSeq
IceProxy::GGSmart::MonitorSession::GetTheRobots(const ::GGSmart::StrSeq& __p_idseq, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__GGSmart__MonitorSession__GetTheRobots_name);
    ::IceInternal::Outgoing __og(this, __GGSmart__MonitorSession__GetTheRobots_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_idseq);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::GGSmart::InvokeFailException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::GGSmart::RobotSeq __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __is->readPendingObjects();
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::GGSmart::MonitorSession::begin_GetTheRobots(const ::GGSmart::StrSeq& __p_idseq, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__GGSmart__MonitorSession__GetTheRobots_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __GGSmart__MonitorSession__GetTheRobots_name, __del, __cookie);
    try
    {
        __result->prepare(__GGSmart__MonitorSession__GetTheRobots_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_idseq);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::GGSmart::MonitorSession::__begin_GetTheRobots(const ::GGSmart::StrSeq& __p_idseq, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::GGSmart::RobotSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::GGSmart::RobotSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::GGSmart::MonitorSessionPrx __proxy = ::GGSmart::MonitorSessionPrx::uncheckedCast(__result->getProxy());
            ::GGSmart::RobotSeq __ret;
            try
            {
                __ret = __proxy->end_GetTheRobots(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (const ::GGSmart::RobotSeq&)> _response;
    };
    return begin_GetTheRobots(__p_idseq, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::GGSmart::RobotSeq
IceProxy::GGSmart::MonitorSession::end_GetTheRobots(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __GGSmart__MonitorSession__GetTheRobots_name);
    ::GGSmart::RobotSeq __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::GGSmart::InvokeFailException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __is->readPendingObjects();
    __result->__endReadParams();
    return __ret;
}

::GGSmart::StrSubStationMap
IceProxy::GGSmart::MonitorSession::GetAuthSubStations(const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__GGSmart__MonitorSession__GetAuthSubStations_name);
    ::IceInternal::Outgoing __og(this, __GGSmart__MonitorSession__GetAuthSubStations_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::GGSmart::InvokeFailException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::GGSmart::StrSubStationMap __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __is->readPendingObjects();
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::GGSmart::MonitorSession::begin_GetAuthSubStations(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__GGSmart__MonitorSession__GetAuthSubStations_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __GGSmart__MonitorSession__GetAuthSubStations_name, __del, __cookie);
    try
    {
        __result->prepare(__GGSmart__MonitorSession__GetAuthSubStations_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::GGSmart::MonitorSession::__begin_GetAuthSubStations(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::GGSmart::StrSubStationMap&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::GGSmart::StrSubStationMap&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::GGSmart::MonitorSessionPrx __proxy = ::GGSmart::MonitorSessionPrx::uncheckedCast(__result->getProxy());
            ::GGSmart::StrSubStationMap __ret;
            try
            {
                __ret = __proxy->end_GetAuthSubStations(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (const ::GGSmart::StrSubStationMap&)> _response;
    };
    return begin_GetAuthSubStations(__ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::GGSmart::StrSubStationMap
IceProxy::GGSmart::MonitorSession::end_GetAuthSubStations(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __GGSmart__MonitorSession__GetAuthSubStations_name);
    ::GGSmart::StrSubStationMap __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::GGSmart::InvokeFailException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __is->readPendingObjects();
    __result->__endReadParams();
    return __ret;
}

const ::std::string&
IceProxy::GGSmart::MonitorSession::ice_staticId()
{
    return ::GGSmart::MonitorSession::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::GGSmart::MonitorSession::__newInstance() const
{
    return new MonitorSession;
}

::Ice::Object* GGSmart::upCast(::GGSmart::MonitorCallback* p) { return p; }

namespace
{
const ::std::string __GGSmart__MonitorCallback_ids[2] =
{
    "::GGSmart::MonitorCallback",
    "::Ice::Object"
};

}

bool
GGSmart::MonitorCallback::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__GGSmart__MonitorCallback_ids, __GGSmart__MonitorCallback_ids + 2, _s);
}

::std::vector< ::std::string>
GGSmart::MonitorCallback::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__GGSmart__MonitorCallback_ids[0], &__GGSmart__MonitorCallback_ids[2]);
}

const ::std::string&
GGSmart::MonitorCallback::ice_id(const ::Ice::Current&) const
{
    return __GGSmart__MonitorCallback_ids[0];
}

const ::std::string&
GGSmart::MonitorCallback::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::GGSmart::MonitorCallback";
    return typeId;
#else
    return __GGSmart__MonitorCallback_ids[0];
#endif
}

::Ice::DispatchStatus
GGSmart::MonitorCallback::___updateRobotInfo(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::GGSmart::RobotPtr __p_rt;
    __is->read(__p_rt);
    __is->readPendingObjects();
    __inS.endReadParams();
    updateRobotInfo(__p_rt, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
GGSmart::MonitorCallback::___robotJoin(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::GGSmart::RobotPtr __p_rt;
    __is->read(__p_rt);
    __is->readPendingObjects();
    __inS.endReadParams();
    robotJoin(__p_rt, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
GGSmart::MonitorCallback::___robotLeave(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_id;
    __is->read(__p_id);
    __inS.endReadParams();
    robotLeave(__p_id, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
GGSmart::MonitorCallback::___pushAllOnlineRobots(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::GGSmart::RobotSeq __p_rts;
    __is->read(__p_rts);
    __is->readPendingObjects();
    __inS.endReadParams();
    pushAllOnlineRobots(__p_rts, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __GGSmart__MonitorCallback_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "pushAllOnlineRobots",
    "robotJoin",
    "robotLeave",
    "updateRobotInfo"
};

}

::Ice::DispatchStatus
GGSmart::MonitorCallback::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__GGSmart__MonitorCallback_all, __GGSmart__MonitorCallback_all + 8, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __GGSmart__MonitorCallback_all)
    {
        case 0:
        {
            return ___ice_id(in, current);
        }
        case 1:
        {
            return ___ice_ids(in, current);
        }
        case 2:
        {
            return ___ice_isA(in, current);
        }
        case 3:
        {
            return ___ice_ping(in, current);
        }
        case 4:
        {
            return ___pushAllOnlineRobots(in, current);
        }
        case 5:
        {
            return ___robotJoin(in, current);
        }
        case 6:
        {
            return ___robotLeave(in, current);
        }
        case 7:
        {
            return ___updateRobotInfo(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
GGSmart::MonitorCallback::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
GGSmart::MonitorCallback::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
GGSmart::__patch(MonitorCallbackPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::GGSmart::MonitorCallbackPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::GGSmart::MonitorCallback::ice_staticId(), v);
    }
}

::Ice::Object* GGSmart::upCast(::GGSmart::MonitorSession* p) { return p; }

namespace
{
const ::std::string __GGSmart__MonitorSession_ids[3] =
{
    "::GGSmart::MonitorSession",
    "::Glacier2::Session",
    "::Ice::Object"
};

}

bool
GGSmart::MonitorSession::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__GGSmart__MonitorSession_ids, __GGSmart__MonitorSession_ids + 3, _s);
}

::std::vector< ::std::string>
GGSmart::MonitorSession::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__GGSmart__MonitorSession_ids[0], &__GGSmart__MonitorSession_ids[3]);
}

const ::std::string&
GGSmart::MonitorSession::ice_id(const ::Ice::Current&) const
{
    return __GGSmart__MonitorSession_ids[0];
}

const ::std::string&
GGSmart::MonitorSession::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::GGSmart::MonitorSession";
    return typeId;
#else
    return __GGSmart__MonitorSession_ids[0];
#endif
}

::Ice::DispatchStatus
GGSmart::MonitorSession::___SetCallback(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::GGSmart::MonitorCallbackPrx __p_cb;
    ::std::string __p_id;
    __is->read(__p_cb);
    __is->read(__p_id);
    __inS.endReadParams();
    try
    {
        SetCallback(__p_cb, __p_id, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::GGSmart::InvokeFailException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
GGSmart::MonitorSession::___DoOrder(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::GGSmart::GGOrderMsgPtr __p_msg;
    ::GGSmart::StrSeq __p_idseq;
    __is->read(__p_msg);
    __is->read(__p_idseq);
    __is->readPendingObjects();
    __inS.endReadParams();
    ::GGSmart::AMD_MonitorSession_DoOrderPtr __cb = new IceAsync::GGSmart::AMD_MonitorSession_DoOrder(__inS);
    try
    {
        DoOrder_async(__cb, __p_msg, __p_idseq, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
GGSmart::MonitorSession::___GetAllOnlineRobots(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::GGSmart::AMD_MonitorSession_GetAllOnlineRobotsPtr __cb = new IceAsync::GGSmart::AMD_MonitorSession_GetAllOnlineRobots(__inS);
    try
    {
        GetAllOnlineRobots_async(__cb, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
GGSmart::MonitorSession::___GetTheRobots(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::GGSmart::StrSeq __p_idseq;
    __is->read(__p_idseq);
    __inS.endReadParams();
    ::GGSmart::AMD_MonitorSession_GetTheRobotsPtr __cb = new IceAsync::GGSmart::AMD_MonitorSession_GetTheRobots(__inS);
    try
    {
        GetTheRobots_async(__cb, __p_idseq, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
GGSmart::MonitorSession::___GetAuthSubStations(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::GGSmart::AMD_MonitorSession_GetAuthSubStationsPtr __cb = new IceAsync::GGSmart::AMD_MonitorSession_GetAuthSubStations(__inS);
    try
    {
        GetAuthSubStations_async(__cb, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

namespace
{
const ::std::string __GGSmart__MonitorSession_all[] =
{
    "DoOrder",
    "GetAllOnlineRobots",
    "GetAuthSubStations",
    "GetTheRobots",
    "SetCallback",
    "destroy",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

::Ice::DispatchStatus
GGSmart::MonitorSession::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__GGSmart__MonitorSession_all, __GGSmart__MonitorSession_all + 10, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __GGSmart__MonitorSession_all)
    {
        case 0:
        {
            return ___DoOrder(in, current);
        }
        case 1:
        {
            return ___GetAllOnlineRobots(in, current);
        }
        case 2:
        {
            return ___GetAuthSubStations(in, current);
        }
        case 3:
        {
            return ___GetTheRobots(in, current);
        }
        case 4:
        {
            return ___SetCallback(in, current);
        }
        case 5:
        {
            return ___destroy(in, current);
        }
        case 6:
        {
            return ___ice_id(in, current);
        }
        case 7:
        {
            return ___ice_ids(in, current);
        }
        case 8:
        {
            return ___ice_isA(in, current);
        }
        case 9:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
GGSmart::MonitorSession::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
GGSmart::MonitorSession::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
GGSmart::__patch(MonitorSessionPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::GGSmart::MonitorSessionPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::GGSmart::MonitorSession::ice_staticId(), v);
    }
}
