// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.2
//
// <auto-generated>
//
// Generated from file `GGMonitorSession.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __E__Dev_qtprjs_GGRTMonitor_generated_GGMonitorSession_h__
#define __E__Dev_qtprjs_GGRTMonitor_generated_GGMonitorSession_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/GCObject.h>
#include <Ice/AsyncResult.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/SlicedDataF.h>
#include <Ice/BuiltinSequences.h>
#include <Glacier2/Session.h>
#include <GGSmart.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace GGSmart
{

class MonitorCallback;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::GGSmart::MonitorCallback>&);
::IceProxy::Ice::Object* upCast(::IceProxy::GGSmart::MonitorCallback*);

class MonitorSession;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::GGSmart::MonitorSession>&);
::IceProxy::Ice::Object* upCast(::IceProxy::GGSmart::MonitorSession*);

}

}

namespace GGSmart
{

class MonitorCallback;
::Ice::Object* upCast(::GGSmart::MonitorCallback*);
typedef ::IceInternal::Handle< ::GGSmart::MonitorCallback> MonitorCallbackPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::GGSmart::MonitorCallback> MonitorCallbackPrx;
void __patch(MonitorCallbackPtr&, const ::Ice::ObjectPtr&);

class MonitorSession;
::Ice::Object* upCast(::GGSmart::MonitorSession*);
typedef ::IceInternal::Handle< ::GGSmart::MonitorSession> MonitorSessionPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::GGSmart::MonitorSession> MonitorSessionPrx;
void __patch(MonitorSessionPtr&, const ::Ice::ObjectPtr&);

}

namespace GGSmart
{

class Callback_MonitorCallback_updateRobotInfo_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MonitorCallback_updateRobotInfo_Base> Callback_MonitorCallback_updateRobotInfoPtr;

class Callback_MonitorCallback_robotJoin_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MonitorCallback_robotJoin_Base> Callback_MonitorCallback_robotJoinPtr;

class Callback_MonitorCallback_robotLeave_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MonitorCallback_robotLeave_Base> Callback_MonitorCallback_robotLeavePtr;

class Callback_MonitorCallback_pushAllOnlineRobots_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MonitorCallback_pushAllOnlineRobots_Base> Callback_MonitorCallback_pushAllOnlineRobotsPtr;

class Callback_MonitorSession_SetCallback_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MonitorSession_SetCallback_Base> Callback_MonitorSession_SetCallbackPtr;

class Callback_MonitorSession_DoOrder_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MonitorSession_DoOrder_Base> Callback_MonitorSession_DoOrderPtr;

class Callback_MonitorSession_GetAllOnlineRobots_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MonitorSession_GetAllOnlineRobots_Base> Callback_MonitorSession_GetAllOnlineRobotsPtr;

class Callback_MonitorSession_GetTheRobots_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_MonitorSession_GetTheRobots_Base> Callback_MonitorSession_GetTheRobotsPtr;

}

namespace IceProxy
{

namespace GGSmart
{

class MonitorCallback : virtual public ::IceProxy::Ice::Object
{
public:

    void updateRobotInfo(const ::GGSmart::RobotPtr& __p_rt)
    {
        updateRobotInfo(__p_rt, 0);
    }
    void updateRobotInfo(const ::GGSmart::RobotPtr& __p_rt, const ::Ice::Context& __ctx)
    {
        updateRobotInfo(__p_rt, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_updateRobotInfo(const ::GGSmart::RobotPtr& __p_rt, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_updateRobotInfo(__p_rt, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_updateRobotInfo(const ::GGSmart::RobotPtr& __p_rt, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_updateRobotInfo(__p_rt, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_updateRobotInfo(const ::GGSmart::RobotPtr& __p_rt, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_updateRobotInfo(__p_rt, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_updateRobotInfo(const ::GGSmart::RobotPtr& __p_rt, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_updateRobotInfo(__p_rt, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_updateRobotInfo(const ::GGSmart::RobotPtr& __p_rt)
    {
        return begin_updateRobotInfo(__p_rt, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_updateRobotInfo(const ::GGSmart::RobotPtr& __p_rt, const ::Ice::Context& __ctx)
    {
        return begin_updateRobotInfo(__p_rt, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_updateRobotInfo(const ::GGSmart::RobotPtr& __p_rt, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateRobotInfo(__p_rt, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateRobotInfo(const ::GGSmart::RobotPtr& __p_rt, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateRobotInfo(__p_rt, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateRobotInfo(const ::GGSmart::RobotPtr& __p_rt, const ::GGSmart::Callback_MonitorCallback_updateRobotInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateRobotInfo(__p_rt, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateRobotInfo(const ::GGSmart::RobotPtr& __p_rt, const ::Ice::Context& __ctx, const ::GGSmart::Callback_MonitorCallback_updateRobotInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateRobotInfo(__p_rt, &__ctx, __del, __cookie);
    }

    void end_updateRobotInfo(const ::Ice::AsyncResultPtr&);
    
private:

    void updateRobotInfo(const ::GGSmart::RobotPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_updateRobotInfo(const ::GGSmart::RobotPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void robotJoin(const ::GGSmart::RobotPtr& __p_rt)
    {
        robotJoin(__p_rt, 0);
    }
    void robotJoin(const ::GGSmart::RobotPtr& __p_rt, const ::Ice::Context& __ctx)
    {
        robotJoin(__p_rt, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_robotJoin(const ::GGSmart::RobotPtr& __p_rt, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_robotJoin(__p_rt, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_robotJoin(const ::GGSmart::RobotPtr& __p_rt, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_robotJoin(__p_rt, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_robotJoin(const ::GGSmart::RobotPtr& __p_rt, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_robotJoin(__p_rt, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_robotJoin(const ::GGSmart::RobotPtr& __p_rt, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_robotJoin(__p_rt, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_robotJoin(const ::GGSmart::RobotPtr& __p_rt)
    {
        return begin_robotJoin(__p_rt, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_robotJoin(const ::GGSmart::RobotPtr& __p_rt, const ::Ice::Context& __ctx)
    {
        return begin_robotJoin(__p_rt, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_robotJoin(const ::GGSmart::RobotPtr& __p_rt, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_robotJoin(__p_rt, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_robotJoin(const ::GGSmart::RobotPtr& __p_rt, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_robotJoin(__p_rt, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_robotJoin(const ::GGSmart::RobotPtr& __p_rt, const ::GGSmart::Callback_MonitorCallback_robotJoinPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_robotJoin(__p_rt, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_robotJoin(const ::GGSmart::RobotPtr& __p_rt, const ::Ice::Context& __ctx, const ::GGSmart::Callback_MonitorCallback_robotJoinPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_robotJoin(__p_rt, &__ctx, __del, __cookie);
    }

    void end_robotJoin(const ::Ice::AsyncResultPtr&);
    
private:

    void robotJoin(const ::GGSmart::RobotPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_robotJoin(const ::GGSmart::RobotPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void robotLeave(const ::std::string& __p_id)
    {
        robotLeave(__p_id, 0);
    }
    void robotLeave(const ::std::string& __p_id, const ::Ice::Context& __ctx)
    {
        robotLeave(__p_id, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_robotLeave(const ::std::string& __p_id, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_robotLeave(__p_id, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_robotLeave(const ::std::string& __p_id, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_robotLeave(__p_id, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_robotLeave(const ::std::string& __p_id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_robotLeave(__p_id, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_robotLeave(const ::std::string& __p_id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_robotLeave(__p_id, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_robotLeave(const ::std::string& __p_id)
    {
        return begin_robotLeave(__p_id, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_robotLeave(const ::std::string& __p_id, const ::Ice::Context& __ctx)
    {
        return begin_robotLeave(__p_id, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_robotLeave(const ::std::string& __p_id, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_robotLeave(__p_id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_robotLeave(const ::std::string& __p_id, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_robotLeave(__p_id, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_robotLeave(const ::std::string& __p_id, const ::GGSmart::Callback_MonitorCallback_robotLeavePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_robotLeave(__p_id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_robotLeave(const ::std::string& __p_id, const ::Ice::Context& __ctx, const ::GGSmart::Callback_MonitorCallback_robotLeavePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_robotLeave(__p_id, &__ctx, __del, __cookie);
    }

    void end_robotLeave(const ::Ice::AsyncResultPtr&);
    
private:

    void robotLeave(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_robotLeave(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void pushAllOnlineRobots(const ::GGSmart::RobotSeq& __p_rts)
    {
        pushAllOnlineRobots(__p_rts, 0);
    }
    void pushAllOnlineRobots(const ::GGSmart::RobotSeq& __p_rts, const ::Ice::Context& __ctx)
    {
        pushAllOnlineRobots(__p_rts, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_pushAllOnlineRobots(const ::GGSmart::RobotSeq& __p_rts, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_pushAllOnlineRobots(__p_rts, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_pushAllOnlineRobots(const ::GGSmart::RobotSeq& __p_rts, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_pushAllOnlineRobots(__p_rts, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_pushAllOnlineRobots(const ::GGSmart::RobotSeq& __p_rts, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_pushAllOnlineRobots(__p_rts, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_pushAllOnlineRobots(const ::GGSmart::RobotSeq& __p_rts, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_pushAllOnlineRobots(__p_rts, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_pushAllOnlineRobots(const ::GGSmart::RobotSeq& __p_rts)
    {
        return begin_pushAllOnlineRobots(__p_rts, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_pushAllOnlineRobots(const ::GGSmart::RobotSeq& __p_rts, const ::Ice::Context& __ctx)
    {
        return begin_pushAllOnlineRobots(__p_rts, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_pushAllOnlineRobots(const ::GGSmart::RobotSeq& __p_rts, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_pushAllOnlineRobots(__p_rts, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_pushAllOnlineRobots(const ::GGSmart::RobotSeq& __p_rts, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_pushAllOnlineRobots(__p_rts, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_pushAllOnlineRobots(const ::GGSmart::RobotSeq& __p_rts, const ::GGSmart::Callback_MonitorCallback_pushAllOnlineRobotsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_pushAllOnlineRobots(__p_rts, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_pushAllOnlineRobots(const ::GGSmart::RobotSeq& __p_rts, const ::Ice::Context& __ctx, const ::GGSmart::Callback_MonitorCallback_pushAllOnlineRobotsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_pushAllOnlineRobots(__p_rts, &__ctx, __del, __cookie);
    }

    void end_pushAllOnlineRobots(const ::Ice::AsyncResultPtr&);
    
private:

    void pushAllOnlineRobots(const ::GGSmart::RobotSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_pushAllOnlineRobots(const ::GGSmart::RobotSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<MonitorCallback> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<MonitorCallback*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<MonitorCallback> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<MonitorCallback*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<MonitorCallback> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<MonitorCallback*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<MonitorCallback> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<MonitorCallback*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<MonitorCallback> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<MonitorCallback*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<MonitorCallback> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<MonitorCallback*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<MonitorCallback> ice_secure(bool __secure) const
    {
        return dynamic_cast<MonitorCallback*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<MonitorCallback> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<MonitorCallback*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<MonitorCallback> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<MonitorCallback*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<MonitorCallback> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<MonitorCallback*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<MonitorCallback> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<MonitorCallback*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<MonitorCallback> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<MonitorCallback*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<MonitorCallback> ice_twoway() const
    {
        return dynamic_cast<MonitorCallback*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<MonitorCallback> ice_oneway() const
    {
        return dynamic_cast<MonitorCallback*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<MonitorCallback> ice_batchOneway() const
    {
        return dynamic_cast<MonitorCallback*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<MonitorCallback> ice_datagram() const
    {
        return dynamic_cast<MonitorCallback*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<MonitorCallback> ice_batchDatagram() const
    {
        return dynamic_cast<MonitorCallback*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<MonitorCallback> ice_compress(bool __compress) const
    {
        return dynamic_cast<MonitorCallback*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<MonitorCallback> ice_timeout(int __timeout) const
    {
        return dynamic_cast<MonitorCallback*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<MonitorCallback> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<MonitorCallback*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<MonitorCallback> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<MonitorCallback*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class MonitorSession : virtual public ::IceProxy::Glacier2::Session
{
public:

    void SetCallback(const ::GGSmart::MonitorCallbackPrx& __p_cb, const ::std::string& __p_id)
    {
        SetCallback(__p_cb, __p_id, 0);
    }
    void SetCallback(const ::GGSmart::MonitorCallbackPrx& __p_cb, const ::std::string& __p_id, const ::Ice::Context& __ctx)
    {
        SetCallback(__p_cb, __p_id, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_SetCallback(const ::GGSmart::MonitorCallbackPrx& __p_cb, const ::std::string& __p_id, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_SetCallback(__p_cb, __p_id, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_SetCallback(const ::GGSmart::MonitorCallbackPrx& __p_cb, const ::std::string& __p_id, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SetCallback(__p_cb, __p_id, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_SetCallback(const ::GGSmart::MonitorCallbackPrx& __p_cb, const ::std::string& __p_id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_SetCallback(__p_cb, __p_id, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_SetCallback(const ::GGSmart::MonitorCallbackPrx& __p_cb, const ::std::string& __p_id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SetCallback(__p_cb, __p_id, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_SetCallback(const ::GGSmart::MonitorCallbackPrx& __p_cb, const ::std::string& __p_id, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_SetCallback(const ::GGSmart::MonitorCallbackPrx& __p_cb, const ::std::string& __p_id)
    {
        return begin_SetCallback(__p_cb, __p_id, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SetCallback(const ::GGSmart::MonitorCallbackPrx& __p_cb, const ::std::string& __p_id, const ::Ice::Context& __ctx)
    {
        return begin_SetCallback(__p_cb, __p_id, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SetCallback(const ::GGSmart::MonitorCallbackPrx& __p_cb, const ::std::string& __p_id, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetCallback(__p_cb, __p_id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetCallback(const ::GGSmart::MonitorCallbackPrx& __p_cb, const ::std::string& __p_id, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetCallback(__p_cb, __p_id, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetCallback(const ::GGSmart::MonitorCallbackPrx& __p_cb, const ::std::string& __p_id, const ::GGSmart::Callback_MonitorSession_SetCallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetCallback(__p_cb, __p_id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetCallback(const ::GGSmart::MonitorCallbackPrx& __p_cb, const ::std::string& __p_id, const ::Ice::Context& __ctx, const ::GGSmart::Callback_MonitorSession_SetCallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetCallback(__p_cb, __p_id, &__ctx, __del, __cookie);
    }

    void end_SetCallback(const ::Ice::AsyncResultPtr&);
    
private:

    void SetCallback(const ::GGSmart::MonitorCallbackPrx&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_SetCallback(const ::GGSmart::MonitorCallbackPrx&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void DoOrder(const ::GGSmart::GGOrderMsgPtr& __p_msg, const ::GGSmart::StrSeq& __p_idseq)
    {
        DoOrder(__p_msg, __p_idseq, 0);
    }
    void DoOrder(const ::GGSmart::GGOrderMsgPtr& __p_msg, const ::GGSmart::StrSeq& __p_idseq, const ::Ice::Context& __ctx)
    {
        DoOrder(__p_msg, __p_idseq, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_DoOrder(const ::GGSmart::GGOrderMsgPtr& __p_msg, const ::GGSmart::StrSeq& __p_idseq, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_DoOrder(__p_msg, __p_idseq, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_DoOrder(const ::GGSmart::GGOrderMsgPtr& __p_msg, const ::GGSmart::StrSeq& __p_idseq, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_DoOrder(__p_msg, __p_idseq, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_DoOrder(const ::GGSmart::GGOrderMsgPtr& __p_msg, const ::GGSmart::StrSeq& __p_idseq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_DoOrder(__p_msg, __p_idseq, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_DoOrder(const ::GGSmart::GGOrderMsgPtr& __p_msg, const ::GGSmart::StrSeq& __p_idseq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_DoOrder(__p_msg, __p_idseq, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_DoOrder(const ::GGSmart::GGOrderMsgPtr& __p_msg, const ::GGSmart::StrSeq& __p_idseq, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_DoOrder(const ::GGSmart::GGOrderMsgPtr& __p_msg, const ::GGSmart::StrSeq& __p_idseq)
    {
        return begin_DoOrder(__p_msg, __p_idseq, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_DoOrder(const ::GGSmart::GGOrderMsgPtr& __p_msg, const ::GGSmart::StrSeq& __p_idseq, const ::Ice::Context& __ctx)
    {
        return begin_DoOrder(__p_msg, __p_idseq, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_DoOrder(const ::GGSmart::GGOrderMsgPtr& __p_msg, const ::GGSmart::StrSeq& __p_idseq, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_DoOrder(__p_msg, __p_idseq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_DoOrder(const ::GGSmart::GGOrderMsgPtr& __p_msg, const ::GGSmart::StrSeq& __p_idseq, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_DoOrder(__p_msg, __p_idseq, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_DoOrder(const ::GGSmart::GGOrderMsgPtr& __p_msg, const ::GGSmart::StrSeq& __p_idseq, const ::GGSmart::Callback_MonitorSession_DoOrderPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_DoOrder(__p_msg, __p_idseq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_DoOrder(const ::GGSmart::GGOrderMsgPtr& __p_msg, const ::GGSmart::StrSeq& __p_idseq, const ::Ice::Context& __ctx, const ::GGSmart::Callback_MonitorSession_DoOrderPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_DoOrder(__p_msg, __p_idseq, &__ctx, __del, __cookie);
    }

    void end_DoOrder(const ::Ice::AsyncResultPtr&);
    
private:

    void DoOrder(const ::GGSmart::GGOrderMsgPtr&, const ::GGSmart::StrSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_DoOrder(const ::GGSmart::GGOrderMsgPtr&, const ::GGSmart::StrSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::GGSmart::RobotSeq GetAllOnlineRobots()
    {
        return GetAllOnlineRobots(0);
    }
    ::GGSmart::RobotSeq GetAllOnlineRobots(const ::Ice::Context& __ctx)
    {
        return GetAllOnlineRobots(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_GetAllOnlineRobots(const ::IceInternal::Function<void (const ::GGSmart::RobotSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetAllOnlineRobots(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetAllOnlineRobots(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetAllOnlineRobots(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetAllOnlineRobots(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::GGSmart::RobotSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetAllOnlineRobots(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetAllOnlineRobots(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetAllOnlineRobots(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_GetAllOnlineRobots(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::GGSmart::RobotSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_GetAllOnlineRobots()
    {
        return begin_GetAllOnlineRobots(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetAllOnlineRobots(const ::Ice::Context& __ctx)
    {
        return begin_GetAllOnlineRobots(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetAllOnlineRobots(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetAllOnlineRobots(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetAllOnlineRobots(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetAllOnlineRobots(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetAllOnlineRobots(const ::GGSmart::Callback_MonitorSession_GetAllOnlineRobotsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetAllOnlineRobots(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetAllOnlineRobots(const ::Ice::Context& __ctx, const ::GGSmart::Callback_MonitorSession_GetAllOnlineRobotsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetAllOnlineRobots(&__ctx, __del, __cookie);
    }

    ::GGSmart::RobotSeq end_GetAllOnlineRobots(const ::Ice::AsyncResultPtr&);
    
private:

    ::GGSmart::RobotSeq GetAllOnlineRobots(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetAllOnlineRobots(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::GGSmart::RobotSeq GetTheRobots(const ::GGSmart::StrSeq& __p_idseq)
    {
        return GetTheRobots(__p_idseq, 0);
    }
    ::GGSmart::RobotSeq GetTheRobots(const ::GGSmart::StrSeq& __p_idseq, const ::Ice::Context& __ctx)
    {
        return GetTheRobots(__p_idseq, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_GetTheRobots(const ::GGSmart::StrSeq& __p_idseq, const ::IceInternal::Function<void (const ::GGSmart::RobotSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetTheRobots(__p_idseq, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetTheRobots(const ::GGSmart::StrSeq& __p_idseq, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetTheRobots(__p_idseq, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetTheRobots(const ::GGSmart::StrSeq& __p_idseq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::GGSmart::RobotSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetTheRobots(__p_idseq, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetTheRobots(const ::GGSmart::StrSeq& __p_idseq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetTheRobots(__p_idseq, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_GetTheRobots(const ::GGSmart::StrSeq& __p_idseq, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::GGSmart::RobotSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_GetTheRobots(const ::GGSmart::StrSeq& __p_idseq)
    {
        return begin_GetTheRobots(__p_idseq, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetTheRobots(const ::GGSmart::StrSeq& __p_idseq, const ::Ice::Context& __ctx)
    {
        return begin_GetTheRobots(__p_idseq, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetTheRobots(const ::GGSmart::StrSeq& __p_idseq, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetTheRobots(__p_idseq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetTheRobots(const ::GGSmart::StrSeq& __p_idseq, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetTheRobots(__p_idseq, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetTheRobots(const ::GGSmart::StrSeq& __p_idseq, const ::GGSmart::Callback_MonitorSession_GetTheRobotsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetTheRobots(__p_idseq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetTheRobots(const ::GGSmart::StrSeq& __p_idseq, const ::Ice::Context& __ctx, const ::GGSmart::Callback_MonitorSession_GetTheRobotsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetTheRobots(__p_idseq, &__ctx, __del, __cookie);
    }

    ::GGSmart::RobotSeq end_GetTheRobots(const ::Ice::AsyncResultPtr&);
    
private:

    ::GGSmart::RobotSeq GetTheRobots(const ::GGSmart::StrSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetTheRobots(const ::GGSmart::StrSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<MonitorSession> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<MonitorSession*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<MonitorSession> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<MonitorSession*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<MonitorSession> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<MonitorSession*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<MonitorSession> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<MonitorSession*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<MonitorSession> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<MonitorSession*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<MonitorSession> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<MonitorSession*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<MonitorSession> ice_secure(bool __secure) const
    {
        return dynamic_cast<MonitorSession*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<MonitorSession> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<MonitorSession*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<MonitorSession> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<MonitorSession*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<MonitorSession> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<MonitorSession*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<MonitorSession> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<MonitorSession*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<MonitorSession> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<MonitorSession*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<MonitorSession> ice_twoway() const
    {
        return dynamic_cast<MonitorSession*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<MonitorSession> ice_oneway() const
    {
        return dynamic_cast<MonitorSession*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<MonitorSession> ice_batchOneway() const
    {
        return dynamic_cast<MonitorSession*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<MonitorSession> ice_datagram() const
    {
        return dynamic_cast<MonitorSession*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<MonitorSession> ice_batchDatagram() const
    {
        return dynamic_cast<MonitorSession*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<MonitorSession> ice_compress(bool __compress) const
    {
        return dynamic_cast<MonitorSession*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<MonitorSession> ice_timeout(int __timeout) const
    {
        return dynamic_cast<MonitorSession*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<MonitorSession> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<MonitorSession*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<MonitorSession> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<MonitorSession*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace GGSmart
{

class MonitorCallback : virtual public ::Ice::Object
{
public:

    typedef MonitorCallbackPrx ProxyType;
    typedef MonitorCallbackPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void updateRobotInfo(const ::GGSmart::RobotPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___updateRobotInfo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void robotJoin(const ::GGSmart::RobotPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___robotJoin(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void robotLeave(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___robotLeave(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void pushAllOnlineRobots(const ::GGSmart::RobotSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___pushAllOnlineRobots(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const MonitorCallback& l, const MonitorCallback& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const MonitorCallback& l, const MonitorCallback& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class MonitorSession : virtual public ::Glacier2::Session
{
public:

    typedef MonitorSessionPrx ProxyType;
    typedef MonitorSessionPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void SetCallback(const ::GGSmart::MonitorCallbackPrx&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___SetCallback(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void DoOrder(const ::GGSmart::GGOrderMsgPtr&, const ::GGSmart::StrSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___DoOrder(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::GGSmart::RobotSeq GetAllOnlineRobots(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetAllOnlineRobots(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::GGSmart::RobotSeq GetTheRobots(const ::GGSmart::StrSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetTheRobots(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const MonitorSession& l, const MonitorSession& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const MonitorSession& l, const MonitorSession& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace GGSmart
{

template<class T>
class CallbackNC_MonitorCallback_updateRobotInfo : public Callback_MonitorCallback_updateRobotInfo_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_MonitorCallback_updateRobotInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_MonitorCallback_updateRobotInfoPtr
newCallback_MonitorCallback_updateRobotInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MonitorCallback_updateRobotInfo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MonitorCallback_updateRobotInfoPtr
newCallback_MonitorCallback_updateRobotInfo(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MonitorCallback_updateRobotInfo<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_MonitorCallback_updateRobotInfoPtr
newCallback_MonitorCallback_updateRobotInfo(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MonitorCallback_updateRobotInfo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MonitorCallback_updateRobotInfoPtr
newCallback_MonitorCallback_updateRobotInfo(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MonitorCallback_updateRobotInfo<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_MonitorCallback_updateRobotInfo : public Callback_MonitorCallback_updateRobotInfo_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_MonitorCallback_updateRobotInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_MonitorCallback_updateRobotInfoPtr
newCallback_MonitorCallback_updateRobotInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MonitorCallback_updateRobotInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MonitorCallback_updateRobotInfoPtr
newCallback_MonitorCallback_updateRobotInfo(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MonitorCallback_updateRobotInfo<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_MonitorCallback_updateRobotInfoPtr
newCallback_MonitorCallback_updateRobotInfo(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MonitorCallback_updateRobotInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MonitorCallback_updateRobotInfoPtr
newCallback_MonitorCallback_updateRobotInfo(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MonitorCallback_updateRobotInfo<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_MonitorCallback_robotJoin : public Callback_MonitorCallback_robotJoin_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_MonitorCallback_robotJoin(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_MonitorCallback_robotJoinPtr
newCallback_MonitorCallback_robotJoin(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MonitorCallback_robotJoin<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MonitorCallback_robotJoinPtr
newCallback_MonitorCallback_robotJoin(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MonitorCallback_robotJoin<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_MonitorCallback_robotJoinPtr
newCallback_MonitorCallback_robotJoin(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MonitorCallback_robotJoin<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MonitorCallback_robotJoinPtr
newCallback_MonitorCallback_robotJoin(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MonitorCallback_robotJoin<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_MonitorCallback_robotJoin : public Callback_MonitorCallback_robotJoin_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_MonitorCallback_robotJoin(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_MonitorCallback_robotJoinPtr
newCallback_MonitorCallback_robotJoin(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MonitorCallback_robotJoin<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MonitorCallback_robotJoinPtr
newCallback_MonitorCallback_robotJoin(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MonitorCallback_robotJoin<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_MonitorCallback_robotJoinPtr
newCallback_MonitorCallback_robotJoin(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MonitorCallback_robotJoin<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MonitorCallback_robotJoinPtr
newCallback_MonitorCallback_robotJoin(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MonitorCallback_robotJoin<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_MonitorCallback_robotLeave : public Callback_MonitorCallback_robotLeave_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_MonitorCallback_robotLeave(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_MonitorCallback_robotLeavePtr
newCallback_MonitorCallback_robotLeave(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MonitorCallback_robotLeave<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MonitorCallback_robotLeavePtr
newCallback_MonitorCallback_robotLeave(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MonitorCallback_robotLeave<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_MonitorCallback_robotLeavePtr
newCallback_MonitorCallback_robotLeave(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MonitorCallback_robotLeave<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MonitorCallback_robotLeavePtr
newCallback_MonitorCallback_robotLeave(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MonitorCallback_robotLeave<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_MonitorCallback_robotLeave : public Callback_MonitorCallback_robotLeave_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_MonitorCallback_robotLeave(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_MonitorCallback_robotLeavePtr
newCallback_MonitorCallback_robotLeave(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MonitorCallback_robotLeave<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MonitorCallback_robotLeavePtr
newCallback_MonitorCallback_robotLeave(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MonitorCallback_robotLeave<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_MonitorCallback_robotLeavePtr
newCallback_MonitorCallback_robotLeave(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MonitorCallback_robotLeave<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MonitorCallback_robotLeavePtr
newCallback_MonitorCallback_robotLeave(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MonitorCallback_robotLeave<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_MonitorCallback_pushAllOnlineRobots : public Callback_MonitorCallback_pushAllOnlineRobots_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_MonitorCallback_pushAllOnlineRobots(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_MonitorCallback_pushAllOnlineRobotsPtr
newCallback_MonitorCallback_pushAllOnlineRobots(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MonitorCallback_pushAllOnlineRobots<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MonitorCallback_pushAllOnlineRobotsPtr
newCallback_MonitorCallback_pushAllOnlineRobots(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MonitorCallback_pushAllOnlineRobots<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_MonitorCallback_pushAllOnlineRobotsPtr
newCallback_MonitorCallback_pushAllOnlineRobots(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MonitorCallback_pushAllOnlineRobots<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MonitorCallback_pushAllOnlineRobotsPtr
newCallback_MonitorCallback_pushAllOnlineRobots(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MonitorCallback_pushAllOnlineRobots<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_MonitorCallback_pushAllOnlineRobots : public Callback_MonitorCallback_pushAllOnlineRobots_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_MonitorCallback_pushAllOnlineRobots(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_MonitorCallback_pushAllOnlineRobotsPtr
newCallback_MonitorCallback_pushAllOnlineRobots(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MonitorCallback_pushAllOnlineRobots<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MonitorCallback_pushAllOnlineRobotsPtr
newCallback_MonitorCallback_pushAllOnlineRobots(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MonitorCallback_pushAllOnlineRobots<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_MonitorCallback_pushAllOnlineRobotsPtr
newCallback_MonitorCallback_pushAllOnlineRobots(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MonitorCallback_pushAllOnlineRobots<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MonitorCallback_pushAllOnlineRobotsPtr
newCallback_MonitorCallback_pushAllOnlineRobots(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MonitorCallback_pushAllOnlineRobots<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_MonitorSession_SetCallback : public Callback_MonitorSession_SetCallback_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_MonitorSession_SetCallback(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GGSmart::MonitorSessionPrx __proxy = ::GGSmart::MonitorSessionPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_SetCallback(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

    private:

    Response _response;
};

template<class T> Callback_MonitorSession_SetCallbackPtr
newCallback_MonitorSession_SetCallback(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MonitorSession_SetCallback<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MonitorSession_SetCallbackPtr
newCallback_MonitorSession_SetCallback(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MonitorSession_SetCallback<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_MonitorSession_SetCallbackPtr
newCallback_MonitorSession_SetCallback(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MonitorSession_SetCallback<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MonitorSession_SetCallbackPtr
newCallback_MonitorSession_SetCallback(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MonitorSession_SetCallback<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_MonitorSession_SetCallback : public Callback_MonitorSession_SetCallback_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_MonitorSession_SetCallback(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GGSmart::MonitorSessionPrx __proxy = ::GGSmart::MonitorSessionPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_SetCallback(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_MonitorSession_SetCallbackPtr
newCallback_MonitorSession_SetCallback(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MonitorSession_SetCallback<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MonitorSession_SetCallbackPtr
newCallback_MonitorSession_SetCallback(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MonitorSession_SetCallback<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_MonitorSession_SetCallbackPtr
newCallback_MonitorSession_SetCallback(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MonitorSession_SetCallback<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MonitorSession_SetCallbackPtr
newCallback_MonitorSession_SetCallback(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MonitorSession_SetCallback<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_MonitorSession_DoOrder : public Callback_MonitorSession_DoOrder_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_MonitorSession_DoOrder(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GGSmart::MonitorSessionPrx __proxy = ::GGSmart::MonitorSessionPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_DoOrder(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

    private:

    Response _response;
};

template<class T> Callback_MonitorSession_DoOrderPtr
newCallback_MonitorSession_DoOrder(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MonitorSession_DoOrder<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MonitorSession_DoOrderPtr
newCallback_MonitorSession_DoOrder(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MonitorSession_DoOrder<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_MonitorSession_DoOrderPtr
newCallback_MonitorSession_DoOrder(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MonitorSession_DoOrder<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MonitorSession_DoOrderPtr
newCallback_MonitorSession_DoOrder(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MonitorSession_DoOrder<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_MonitorSession_DoOrder : public Callback_MonitorSession_DoOrder_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_MonitorSession_DoOrder(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GGSmart::MonitorSessionPrx __proxy = ::GGSmart::MonitorSessionPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_DoOrder(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_MonitorSession_DoOrderPtr
newCallback_MonitorSession_DoOrder(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MonitorSession_DoOrder<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MonitorSession_DoOrderPtr
newCallback_MonitorSession_DoOrder(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MonitorSession_DoOrder<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_MonitorSession_DoOrderPtr
newCallback_MonitorSession_DoOrder(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MonitorSession_DoOrder<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MonitorSession_DoOrderPtr
newCallback_MonitorSession_DoOrder(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MonitorSession_DoOrder<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_MonitorSession_GetAllOnlineRobots : public Callback_MonitorSession_GetAllOnlineRobots_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::GGSmart::RobotSeq&);

    CallbackNC_MonitorSession_GetAllOnlineRobots(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GGSmart::MonitorSessionPrx __proxy = ::GGSmart::MonitorSessionPrx::uncheckedCast(__result->getProxy());
        ::GGSmart::RobotSeq __ret;
        try
        {
            __ret = __proxy->end_GetAllOnlineRobots(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_MonitorSession_GetAllOnlineRobotsPtr
newCallback_MonitorSession_GetAllOnlineRobots(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::GGSmart::RobotSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MonitorSession_GetAllOnlineRobots<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MonitorSession_GetAllOnlineRobotsPtr
newCallback_MonitorSession_GetAllOnlineRobots(T* instance, void (T::*cb)(const ::GGSmart::RobotSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MonitorSession_GetAllOnlineRobots<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_MonitorSession_GetAllOnlineRobots : public Callback_MonitorSession_GetAllOnlineRobots_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::GGSmart::RobotSeq&, const CT&);

    Callback_MonitorSession_GetAllOnlineRobots(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GGSmart::MonitorSessionPrx __proxy = ::GGSmart::MonitorSessionPrx::uncheckedCast(__result->getProxy());
        ::GGSmart::RobotSeq __ret;
        try
        {
            __ret = __proxy->end_GetAllOnlineRobots(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_MonitorSession_GetAllOnlineRobotsPtr
newCallback_MonitorSession_GetAllOnlineRobots(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::GGSmart::RobotSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MonitorSession_GetAllOnlineRobots<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MonitorSession_GetAllOnlineRobotsPtr
newCallback_MonitorSession_GetAllOnlineRobots(T* instance, void (T::*cb)(const ::GGSmart::RobotSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MonitorSession_GetAllOnlineRobots<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_MonitorSession_GetTheRobots : public Callback_MonitorSession_GetTheRobots_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::GGSmart::RobotSeq&);

    CallbackNC_MonitorSession_GetTheRobots(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GGSmart::MonitorSessionPrx __proxy = ::GGSmart::MonitorSessionPrx::uncheckedCast(__result->getProxy());
        ::GGSmart::RobotSeq __ret;
        try
        {
            __ret = __proxy->end_GetTheRobots(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_MonitorSession_GetTheRobotsPtr
newCallback_MonitorSession_GetTheRobots(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::GGSmart::RobotSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MonitorSession_GetTheRobots<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_MonitorSession_GetTheRobotsPtr
newCallback_MonitorSession_GetTheRobots(T* instance, void (T::*cb)(const ::GGSmart::RobotSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_MonitorSession_GetTheRobots<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_MonitorSession_GetTheRobots : public Callback_MonitorSession_GetTheRobots_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::GGSmart::RobotSeq&, const CT&);

    Callback_MonitorSession_GetTheRobots(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::GGSmart::MonitorSessionPrx __proxy = ::GGSmart::MonitorSessionPrx::uncheckedCast(__result->getProxy());
        ::GGSmart::RobotSeq __ret;
        try
        {
            __ret = __proxy->end_GetTheRobots(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_MonitorSession_GetTheRobotsPtr
newCallback_MonitorSession_GetTheRobots(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::GGSmart::RobotSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MonitorSession_GetTheRobots<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_MonitorSession_GetTheRobotsPtr
newCallback_MonitorSession_GetTheRobots(T* instance, void (T::*cb)(const ::GGSmart::RobotSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_MonitorSession_GetTheRobots<T, CT>(instance, cb, excb, sentcb);
}

}

#include <IceUtil/PopDisableWarnings.h>
#endif
